Ultimate OSINT Desktop App: Project Guide for Claude Code
This document is a complete, self-contained guide for developing your state-of-the-art OSINT (Open Source Intelligence) desktop application. It's designed as your final school project, leveraging permission for full testing. The app, named NeoTrace OSINT Suite (inspired by Sherlock Holmes' deductive prowess and modern AI), combines terminal-like aesthetics with advanced OSINT capabilities, seamless AI integration, and interactive desktop features. This guide draws from an analysis of the best existing OSINT tools (e.g., Sherlock, SpiderFoot, Recon-ng), terminal frameworks, and AI integrations to create something innovative: a "hacker terminal" UI that fades intelligently, responds to shortcuts, and uses AI for real-time analysis and natural-language queries.
Upload this Markdown file directly to Claude Code with instructions like: "Build the MVP based on this guide, starting with Phase 1. Use Python and the specified stack. Generate modular code with tests."

1. Project Vision and Goals
Overview
NeoTrace is a sleek, borderless desktop app that emulates a professional hacker's terminal (e.g., green-on-black matrix style with subtle animations) while providing comprehensive OSINT reconnaissance. Unlike pure CLI tools like Sherlock, it's a full desktop experience: Launch it as a floating, always-on-top window that interacts with your workflow. Click a generated link? It fades out gracefully. Need it back? Hit a shortcut (e.g., Ctrl+Alt+O). Integrated AI (via Ollama) turns raw data into insights, e.g., "Analyze this username for risks" → AI summarizes breaches, connections, and threats.
This isn't just another Sherlock clone—it's the "ultimate" evolution:

Terminal-Based Core: Runs commands in a simulated shell for familiarity.
Desktop Interactivity: Fades on external clicks, auto-recalls on hotkeys or voice ("Hey Neo").
AI-Powered: Local LLM for query routing, sentiment analysis, and synthesis (e.g., "Cross-reference this email with dark web leaks").
Ethical & Testable: Built for school demo—includes mock data modes and logging for grading.

Goals

Educational Impact: Demonstrate OSINT mastery, Python proficiency, and AI integration for your grade.
User Experience: Feel like a cyber detective—sleek, non-intrusive, powerful.
Innovation: Combine top tools (e.g., Sherlock's username hunting + SpiderFoot's automation) with new AI features (e.g., predictive threat scoring).
Scope: MVP in 4-6 weeks; full version with 3D elements (e.g., animated graphs) for polish.
Assumptions: Debian/Linux focus (your setup); open-source/free; local AI for privacy. Test on real targets ethically (e.g., your own accounts).

Target Users

Students/pentesters for recon.
Security pros for quick audits.
You: Impress graders with a demo video of live OSINT on a mock target.


2. Key Features
Inspired by top tools (Sherlock for usernames, theHarvester for emails, Recon-ng for modular recon) and AI examples (e.g., ChatGPT for summarization, Maltego AI for entity linking).
Core OSINT Modules (Terminal Commands)

Username Enumeration (Sherlock-style): neo username john.doe → Scans 400+ sites, outputs links with AI risk score (e.g., "High: Breached on 3 sites").
Email Harvesting (theHarvester): neo email target.com → Gathers addresses, domains; AI flags phishing risks.
Phone Recon (PhoneInfoga): neo phone +1-555-1234 → Carrier, location, footprints; AI summarizes social ties.
Domain/IP Scan (SpiderFoot/Recon-ng): neo domain example.com → Subdomains, ports, leaks; visual graph via ASCII art.
Social Media Deep Dive (Osintgram): neo social @target → Posts, followers, sentiment; AI detects anomalies (e.g., fake profiles).
Dark Web/Breach Check (HaveIBeenPwned integration): neo breach email@ex.com → Leaks; AI predicts impact.
New Innovation: neo ai-query "Find connections between john.doe and companyX" → AI routes to modules, synthesizes report with visualizations.

Desktop Interactions

Sleek Terminal UI: Borderless, full-screen optional, green monospace font, subtle glow effects. Fades to 20% opacity on external app focus (e.g., browser link click); recalls on shortcut.
Keyboard Shortcuts: Ctrl+Alt+O (toggle), Ctrl+R (run command), Esc (clear), Ctrl+C (copy output).
Smart Fade/Recall: Monitors mouse/keyboard; auto-pops if idle >5min or on hotkey. Supports multi-monitor.
Output Handling: Clickable links open in default browser; export to PDF/CSV with AI summaries.

AI Integration

Local LLM (Ollama): Fine-tune on OSINT datasets (e.g., NIST threats) for queries like "Summarize risks from this data."
Features: Natural-language input (neo ai "What's the threat level?"), auto-analysis (e.g., sentiment on social posts), predictive alerts (e.g., "This username links to 2 breaches").
Examples from Research: Like Lampyre's AI gathering or DarkGPT's OSINT assistant—AI processes outputs for insights without cloud risks.

Security/Ethics

Rate-limiting to avoid bans.
Mock mode for school demos (fake data).
Logging for audits; no data storage without consent.


3. Technology Stack
Python-centric for your expertise; open-source/free. Focus on Debian 13 compatibility.
Core Language/Framework

Python 3.12+: Backend logic, OSINT modules.
UI: Textual (Rich-based TUI framework) for sleek terminal rendering—widgets, layouts, mouse support. Alternative: Urwid for advanced TUIs.
Desktop Wrapper: PyQt6 for borderless window, transparency, global hotkeys (embed Textual via QTextEdit). Enables fade effects and shortcuts.

OSINT Libraries/Modules

Sherlock: Username hunting (pip install sherlock-project).
theHarvester: Email/domain recon (apt install theharvester).
PhoneInfoga: Phone OSINT (pip install phoneinfoga).
SpiderFoot: Automation (pip install spiderfoot).
Recon-ng: Modular framework (apt install recon-ng).
Other: HaveIBeenPwned API (requests), Shodan (optional API key for demos).

AI Integration

Ollama: Local LLM (llama3 model; fine-tune with OSINT prompts like "Analyze this recon data for threats").
LangChain: Chain AI with tools (pip install langchain-ollama) for routing queries to modules.

Audio/Interactivity (Optional Polish)

Vosk: Voice commands ("Hey Neo, run username scan").
PyAudio/pyttsx3: TTS for AI responses (generic male voice).

Dependencies (requirements.txt)
texttextual
urwid  # Fallback for TUI
pyqt6
ollama
langchain-ollama
sherlock-project
phoneinfoga
spiderfoot
requests
beautifulsoup4  # Web scraping
rich  # Rich text output
pytest  # Testing
pyinstaller  # Packaging

System: sudo apt install recon-ng theharvester tesseract-ocr portaudio19-dev.

Development Tools

Git: Repo for version control.
pytest: Unit/integration tests (e.g., mock API calls).
PyInstaller: Bundle into .deb executable for Debian.


4. Architecture
High-Level Design (MVC + Modular)

Model: OSINT modules (e.g., Sherlock wrapper) + AI agent (Ollama via LangChain for query processing).
View: Textual widgets (e.g., Header, CommandInput, OutputTree) rendered in PyQt window.
Controller: Handles inputs (CLI commands, AI queries), routes to models, updates view. Monitors system events for fade/recall.
Data Flow:

User types/runs command or AI query.
Controller routes to module/AI.
Output rendered as rich text/tree; links clickable.
On external focus: Fade window (PyQt opacity).
Hotkey: Recall and resume.



New Innovations

AI Threat Predictor: Score outputs (0-100) based on breach count, sentiment—e.g., "Username risk: 85/100 (3 leaks, negative social sentiment)".
Visual Recon Graph: ASCII art for connections (e.g., username → email → breach); AI narrates.
Ethical Guardrails: Prompt AI to flag illegal queries; log all runs for school demo.

Diagram (ASCII for Reference)
text[User Input: Command/AI Query] --> [Controller: Route & Hotkey Listener]
                                  |
                                  v
[Model: OSINT Modules + Ollama AI] --> [Analysis/Output]
                                  |
                                  v
[View: Textual TUI in PyQt Window] <-- [Fade on External Click]

5. Development Roadmap
Agile phases; 4-6 weeks for MVP. Test ethically (e.g., on public datasets like your GitHub).
Phase 1: Setup & Core UI (1 Week)

Init Git repo, venv, install deps.
Build borderless PyQt window with Textual embed: Command prompt, output pane.
Add fade/hotkey logic (PyQt signals).
Milestone: Sleek terminal launches, echoes commands.

Phase 2: OSINT Modules (1-2 Weeks)

Integrate Sherlock, theHarvester, PhoneInfoga as subcommands.
Basic output: Colored text, clickable links.
Milestone: neo username test runs, displays results.

Phase 3: AI Integration (1 Week)

Setup Ollama (pull llama3; sample fine-tune script with OSINT prompts).
LangChain chains: Query → Module run → AI summary.
Add neo ai command for natural queries.
Milestone: AI analyzes output (e.g., "Risk score: Medium").

Phase 4: Polish & Interactions (1 Week)

Fade/recall, shortcuts, voice (optional).
ASCII graphs, exports.
Tests: Mock APIs, edge cases.
Package with PyInstaller.
Milestone: Full MVP; demo script for grading.

Phase 5: Future/Polish

3D graphs (Matplotlib embed).
Dark web module (Tor integration).
Mobile companion (Telegram bot).


6. Risks & Mitigations

API Rate Limits/Bans: Add delays; use proxies in tests.
AI Hallucinations: Verify outputs; fallback to raw data.
UI Performance: Optimize Textual for Debian; test on low-spec.
Ethics/School: Include consent prompts; demo on self-data. Document all for graders.
Dependencies: All pip/apt; fallback to mocks if issues.

This guide synthesizes the best from research (e.g., Sherlock's speed + Maltego's graphs + AI from Lampyre) into your ultimate tool. Ready to code? Share outputs/errors for tweaks—let's ace that grade!3.3sFast
